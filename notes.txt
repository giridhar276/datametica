** Everything in Python is Object **
** Every object contains set of methods ***

number
------
number can be integer or decimal or octal or hexadecimal.

val = 45
aval = 56.4


string
------
string is defined in single or double or triple quotes.

aname = "python programming"
bname = 'unix shell'
cname = """scala programming"""


list
----
list contains set of elements.
Elements can be numbers or strings or any combination.
list elements are defined in []

alist = [10,20,30,40]
blist = [45.43,45.3,78.7]
clist = [10,"unix","java",56.5]


tuple ( immutable , unchangable  , uneditable , readonly )
------
tuple contains set of elements.
Elements can be numbers or strings or any combination.
tuple elements are defined in ().
**** Elements defined INSIDE TUPLE cannot be modified  DIRECTLY *****

atup = ("unix","java",56,56.545)


dictionary
-------------
In dictionary , elements are defined in key:value pairs
Indexing is not allowed in dictionary
In dictionary,
          key is string or number which is used to uniquely identify the value
          value can be number or string or list or tuple or dictionary.

syntax:    object = {key:value , key:value ..... }
example:     book = {"chap1":10 ,"chap2":20 }
              info= {1:2,3:4,5:6}
              data = {"chap1":[10,"UK","Rita"] ,"chap2":[20,"US","Mary"] }


set
------
set is UNORDERED collection of UNIQUE elements of SAME type.

aset = {10,10,10,20,30,40}



mutable objects
----------------
list
dictionary
set


immutable objects
--------------------
tuple
string
number



functions
- builtin functions
- user defined functions



builtin functions
-----------------
print()
len()
dir()
help()
input()
max()
min()
sum()
type()
isinstance()

list()
tuple()
str()
int()
float()
oct()
hex()
set()
dict()











How to get all the builtin functions ?

dir(__builtin__)     --> in the console



user defined functions
----------------------

function | block | submodule | definition
----------------------------------------

- reusability purpose
- define the code once and call the block for multiple times


ways of passing arguments
---------------------------
-fixed arguments
-default arguments
-keyword arguments

-variable length arguments




file handling
---------------

- working with flat files ( csv txt conf log rtf prop ... )
----------------------------


opening the file
-----------------
syntax :   object = open(filename,mode)
example:     fr = open("customers.txt","r")  ---> read mode
             fw = open("customers.txt","w")  ---> write mode
             fa = open("customers.txt","a")  ---> append mode


closing the file
-----------------
fr.close()






- working with third party files ( xlsx pdf ppt zip rar ... )
















library | package | module |
---------------------------
Every library contains set of methods.


exception handling
-------------------


try
except
else
finally
raise







library | package | module |
---------------------------
Every library contains set of methods.


- builtin libraries    ( 8000+ libraries are installed with Anaconda)
---------------------
all the builtin libraries are installed with python setup which are generally used(system operations,
file handling operations, mail alerts , ftp operations, maths operations, OS level operations ...) by everyone

- third party libraries
------------------------
Depending on the requirement( cloud operations, excel , ML , data analytics , image processing ,database ,testing) developer has to install the third party library from 

www.pypi.org ( doing manually)
using pip tool
using conda tool
using easy_install tool



builtin libraries which are generally used
----------------------------------------
sys           : system python config information
urllib.request: working with http
math          : mathematical operations
random        : random numbers
calendar
smtplib       : sending mails
ftplib        : ftp'ng the file
telnetlib     :
logging       : logging all the events
shutil        : copy,move,rmtree ....
filecmp       : comparing directories
zipfile       : create/extract the zip files
rarfile       : create/extract the tar files
tarfile       : create/extract the tarfiles
getpass       : shadowing the password
json          : reading/writing json files
csv           : reading/writing csv files
xml        
sysconfig     : system configuration
collections   : working with dictionaries
argparse      : passing args from command line
optparse      : passing args from command line
time          : working with date and time
datetime      : working with date and time
cryptography  : encrypting and decrypting the passwords
heapq         : performing array operations
gzip          : reading gunzip files
re            : validating the strings
ipadresss     : validting ip address
platform      : display platform information
pathlib       : creating temp files
threading     : for performing multi threading
multiprocessing:
subprocess    : invoking the system commands ( linux or dos commands)



frequently used third party libraries
---------------------------------------
database related
----------------
pymysql   :
cx_Oracle
pymongo
pymssql

web frameworks ( developing web applications)
--------------
django
flask
bottom

analytics/machine learning
---------------------------
numpy
scipy
pandas
seaborn
plotly
ggplot
matplotlib   : visualizing data .. bar graph.. pie graph
scikit-learn :  machine learning algorithms

image processing
---------------
pillow
opencv
pytorch


APIs ( REST API)
-----
requests

excel programming
------------------
openpyxl    : reading/write excel files
xlsxwriter  : writing to excel file
python-docx : working with ms-word
pandas

networking
-----------
paramiko   :  interacting with remote servers
netmiko    :  connecting to router/switch
pyping     :  ping any host or ip address














steps for installing manually
------------------------------

method 1:
browse for the required library as per your requirement
open pypi.org and search for the library
Click on 'Download Files' and download the tar.gz 
navigate to the downloaded path and execute the below command 
Eg: pip install PyMySQL-1.0.2.tar.gz



browse for the required library as per your requirement
open pypi.org and search for the library
Click on 'Download Files' and download the tar.gz 
navigate to the downloaded path and extract the file
and execute the below command

python setup.py install
























































