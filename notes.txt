** Everything in Python is Object **
** Every object contains set of methods ***

number
------
number can be integer or decimal or octal or hexadecimal.

val = 45
aval = 56.4


string
------
string is defined in single or double or triple quotes.

aname = "python programming"
bname = 'unix shell'
cname = """scala programming"""


list
----
list contains set of elements.
Elements can be numbers or strings or any combination.
list elements are defined in []

alist = [10,20,30,40]
blist = [45.43,45.3,78.7]
clist = [10,"unix","java",56.5]


tuple ( immutable , unchangable  , uneditable , readonly )
------
tuple contains set of elements.
Elements can be numbers or strings or any combination.
tuple elements are defined in ().
**** Elements defined INSIDE TUPLE cannot be modified  DIRECTLY *****

atup = ("unix","java",56,56.545)


dictionary
-------------
In dictionary , elements are defined in key:value pairs
Indexing is not allowed in dictionary
In dictionary,
          key is string or number which is used to uniquely identify the value
          value can be number or string or list or tuple or dictionary.

syntax:    object = {key:value , key:value ..... }
example:     book = {"chap1":10 ,"chap2":20 }
              info= {1:2,3:4,5:6}
              data = {"chap1":[10,"UK","Rita"] ,"chap2":[20,"US","Mary"] }


set
------
set is UNORDERED collection of UNIQUE elements of SAME type.

aset = {10,10,10,20,30,40}



mutable objects
----------------
list
dictionary
set


immutable objects
--------------------
tuple
string
number



functions
- builtin functions
- user defined functions



builtin functions
-----------------
print()
len()
dir()
help()
input()
max()
min()
sum()
type()
isinstance()

list()
tuple()
str()
int()
float()
oct()
hex()
set()
dict()











How to get all the builtin functions ?

dir(__builtin__)     --> in the console



user defined functions
----------------------

function | block | submodule | definition
----------------------------------------

- reusability purpose
- define the code once and call the block for multiple times


ways of passing arguments
---------------------------
-fixed arguments
-default arguments
-keyword arguments

-variable length arguments




file handling
---------------

- working with flat files ( csv txt conf log rtf prop ... )
----------------------------


opening the file
-----------------
syntax :   object = open(filename,mode)
example:     fr = open("customers.txt","r")  ---> read mode
             fw = open("customers.txt","w")  ---> write mode
             fa = open("customers.txt","a")  ---> append mode


closing the file
-----------------
fr.close()






- working with third party files ( xlsx pdf ppt zip rar ... )
















library | package | module |
---------------------------
Every library contains set of methods.



























